#!/bin/sh

. /usr/libexec/os-helpers-fs
. /usr/libexec/os-helpers-logging

set -o errexit

NVIDIA_PART_OFFSET="4097"
DEV_PATH="/dev/mmcblk0"
BOOT_PART="${DEV_PATH}boot0"
UPGRADE_PARTITIONS=0
BIN_INSTALL_PATH="/opt/tegra-binaries"
OFFS=(1659 5243 18043)
BOOT_BLOB="${BIN_INSTALL_PATH}/boot0.img"
DURING_UPDATE=${DURING_UPDATE:-0}

# Old 28.x based images are not able to re-write the
# 28.x L4T partition layout with the offsets expected
# by the tegra firmware at that revision. We therefore
# patch the old hook so that it's able to boot after
# a failed rollback-health.
backport_rollback_health_fix()
{
    inactive_hook=$(find /mnt/sysroot/active/ -name "50-tx2-update")
    # On 32.x releases this file was renamed, there's no need to update it
    if [ -e ${inactive_hook} ]; then
        if grep -q "DURING_UPDATE" "${inactive_hook}"; then
            info "No need to backport rollback-health fix to old hook"
        else
            # Extra check, new 32.X systems use a different name for the partition spec file
            old_part_spec=$(find /mnt/sysroot/active/ -name "partition_specification.txt")
            if [ -e ${old_part_spec} ]; then
                info "Will backport rollback-health fix to old hostapp-update hook"
                cp "${BIN_INSTALL_PATH}/tx2_28_x_hook_fix.sh" ${inactive_hook}
                info "Applied rollback-health fix to old hostapp-update hook"
            else
                info "Old partition specification file not found in current sysroot: ${old_part_spec}, hook will not be replaced!"
            fi
        fi
    else
        info "Upgrading from an L4T 32.X system, rollback-health fix is not needed"
    fi
}


update_needed() {
    current_update_file=${1}
    device=${2}
    update_size=$(ls -al $current_update_file | awk '{print $5}')
    update_md5sum=$(md5sum $current_update_file | awk '{print $1'})

    existing_md5sum=$(dd if=$device count=1 bs=$update_size status=none | md5sum | awk '{print $1}')

    if [ ! "$existing_md5sum" = "$update_md5sum" ]; then
        echo 1
    else
	echo 0
    fi
}

get_odm_value() {
    odm_off1=$(dd if=${1} skip=${OFFS[0]} bs=1 count=1 status=none | xxd -p)
    odm_off2=$(dd if=${1} skip=${OFFS[1]} bs=1 count=1 status=none | xxd -p)
    odm_off3=$(dd if=${1} skip=${OFFS[2]} bs=1 count=1 status=none | xxd -p)

    if [[ "${odm_off1}" == "${odm_off2}" ]] && [[ "${odm_off2}" == "${odm_off3}" ]]; then
        echo "${odm_off1}";
    else
        echo "unmatched";
    fi;
}

set_odm_value() {
    for offset in ${OFFS[@]}
    do
        info "Writing ODM byte ${1} to ${2} at offset ${offset}"
        echo -n -e "\\x${1}" | dd of=${2} seek=${offset} bs=1 count=1 conv=notrunc,fsync
    done
}

fix_gpt_header()
{
    sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | fdisk ${DEV_PATH}
    x
    l
    28
    r
    w
EOF

    partprobe /dev/mmcblk0 || true
}

update_partition_binaries()
{
    for line in $(cat $1); do
        part_name=$(echo $line | cut -d ':' -f 1)
        file_name=$(echo $line | cut -d ':' -f 2)
        src="${BIN_INSTALL_PATH}/${file_name}"
        dst=$(get_state_path_from_label "$part_name")
        retries=0
        max_retries=5


        # On a different CDS DT we had instances where /dev/disk/by-state symlinks appeared briefly,
        # only to disappear later when dd tried to access them. Let's ensure the link exists and retry otherwise.
        # At most, if no symlink exists or it can't be used, dd will fail and the old hooks will be run.
        # We've seen this race happen sporadically with the first partition, mts-bootpack, for that device-type
        # so let's bring in the fix for the generic tx2 as well. And also set errexit because at this point
        # any units running on 28.x should have been upgraded, and even so, we do backport_rollback_health_fix()
        while [ ! -L "$dst" ]
        do
            info "Symlink $dst for $part_name not found, will retry in a second..."
            sleep 1;
            retries=$(( $retries + 1 ))
            if [ $retries -ge $max_retries ]; then
                info "Retries limit reached and $dst is still not present, bail out!"
                exit 1
            fi
            dst=$(get_state_path_from_label "$part_name")
            info "State path after retry is $dst"
        done

	if [ $(update_needed $src $dst) -eq 1 ]; then
            info "Will update ${dst}"
            dd if=${src} of=${dst} bs=64K conv=fsync
            info "Updated ${dst}"
        else
            info "No need to update ${dst}"
        fi
    done
}

NUM_ADSP_PART=$(parted -s ${DEV_PATH} print | grep adsp | wc -l)
if [ ${NUM_ADSP_PART} -lt 2 ]; then
    # adsp-fw partitions are mandatory only on L4T 32.2
    info "ADSP firmware partition NOT found:${NUM_ADSP_PART}. Will upgrade partition table to L4T 32.2"
    UPGRADE_PARTITIONS=1
else
    info "Found ${NUM_ADSP_PART} ADSP firmware partitions. No need to upgrade GPT"
fi

if [ ${UPGRADE_PARTITIONS} -eq 1 ]; then
    backport_rollback_health_fix
    info "Removing old L4T 28.X partitions"

    num_parts=$(sfdisk -l /dev/mmcblk0 | grep mmcblk0p | wc -l)
    for (( idx=1; idx <= ${num_parts}; ++idx ))
        do
            if sfdisk --part-label /dev/mmcblk0 ${idx} | grep -q "resin"; then
               echo "Ignore resin part ${idx}"
            else
               sfdisk --delete /dev/mmcblk0 ${idx} || true
            fi
        done

    info "Proceeding to create new L4T partitions"

    # If the partition table was rolled-back to 28.X due to rollback-health,
    # we first need to set the new (32.X) number of partitions in the MBR
    # so that parted can add more partitions (were 16 originally)
    fix_gpt_header

    partitions=$(cat "${BIN_INSTALL_PATH}/partition_specification186.txt")
    start=${NVIDIA_PART_OFFSET}
    for n in ${partitions}; do
        part_name=$(echo $n | cut -d ':' -f 1)
        file_name=$(echo $n | cut -d ':' -f 2)
        part_size=$(echo $n | cut -d ':' -f 3)
        end=$(expr ${start} \+ ${part_size} \- 1)
        parted -s ${DEV_PATH} unit s mkpart $part_name ${start} ${end}
        dd if="${BIN_INSTALL_PATH}/${file_name}" of=${DEV_PATH} conv=notrunc seek=${start} conv=fsync
        start=$(expr ${end} \+ 1)
    done

    info "Created L4T 32.X partitions"

elif [ ${UPGRADE_PARTITIONS} -eq 0 ]; then
    update_partition_binaries "${BIN_INSTALL_PATH}/partition_specification186.txt"
fi

bootpart_odm=$(get_odm_value ${BOOT_PART});
bootblob_odm=$(get_odm_value ${BOOT_BLOB});

if [[ ${bootpart_odm} != "unmatched"} ]] && [[ ${bootblob_odm} != "unmatched" ]] ; then
    info "Valid ODMDATA values found in both ${BOOT_PART} and ${BOOT_BLOB}"
    if [[ ${bootpart_odm} == ${bootblob_odm} ]]; then
        info "No need to transfer existing ODMDATA"
    else
        info "Existing ODMDATA ${bootpart_odm} does not match HUP ODMDATA ${bootblob_odm}"
        set_odm_value ${bootpart_odm} ${BOOT_BLOB}
    fi;
else
    echo "[WARNING] Unmatched ODMDATA, will not update HUP blob: ${bootpart_odm} - ${bootblob_odm}"
fi

src=${BOOT_BLOB}
dst=${BOOT_PART}

if [ $(update_needed $src $dst) -eq 1 ]; then
    info "Will update $dst"
    echo 0 > /sys/block/mmcblk0boot0/force_ro
    # 64K block size gives optimal performance, larger values show no speed-up
    dd if=${src} of=${dst} bs=64K conv=fsync
    echo 1 > /sys/block/mmcblk0boot0/force_ro
    info "Updated $dst"
else
    info "No need to update ${dst}"
fi

sync
