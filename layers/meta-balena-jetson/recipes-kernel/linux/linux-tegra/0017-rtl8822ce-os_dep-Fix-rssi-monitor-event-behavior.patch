From 6786c323afc24c82cfab32c230b685ad32ec9399 Mon Sep 17 00:00:00 2001
From: OpenEmbedded <ttomaino@6river.com>
Date: Wed, 29 Mar 2023 00:42:41 -0400
Subject: [PATCH] rtl8822ce/os_dep: Fix rssi monitor event behavior

Upstream-status: Inappropriate [configuration]
Signed-off-by: Todd Tomaino <ttomaino@email.com>
---
 .../net/wireless/realtek/rtl8822ce/Makefile   | 13 +++++--
 .../rtl8822ce/os_dep/linux/ioctl_cfg80211.c   | 18 +++++++++
 .../rtl8822ce/os_dep/linux/rtw_cfgvendor.c    | 37 ++++++++++++++++++-
 3 files changed, 64 insertions(+), 4 deletions(-)

diff --git a/nvidia/drivers/net/wireless/realtek/rtl8822ce/Makefile b/nvidia/drivers/net/wireless/realtek/rtl8822ce/Makefile
index 5a5f3c7543e3..13003e9b2d99 100644
--- a/nvidia/drivers/net/wireless/realtek/rtl8822ce/Makefile
+++ b/nvidia/drivers/net/wireless/realtek/rtl8822ce/Makefile
@@ -78,7 +78,7 @@ CONFIG_80211W = y
 CONFIG_REDUCE_TX_CPU_LOADING = n
 CONFIG_BR_EXT = y
 CONFIG_TDLS = n
-CONFIG_WIFI_MONITOR = n
+CONFIG_WIFI_MONITOR = y
 CONFIG_MCC_MODE = n
 CONFIG_APPEND_VENDOR_IE_ENABLE = n
 CONFIG_RTW_NAPI = y
@@ -90,7 +90,7 @@ CONFIG_ICMP_VOQ = n
 CONFIG_IP_R_MONITOR = n #arp VOQ and high rate
 # user priority mapping rule : tos, dscp
 CONFIG_RTW_UP_MAPPING_RULE = tos
-CONFIG_RTW_MBO = n
+CONFIG_RTW_MBO = y
 CONFIG_RTW_NBI = n
 ########################## Android ###########################
 # CONFIG_RTW_ANDROID - 0: no Android, 4/5/6/7/8/9/10/11 : Android version
@@ -1342,11 +1342,18 @@ EXTRA_CFLAGS += -DCONFIG_IOCTL_CFG80211 -DRTW_USE_CFG80211_STA_EVENT
 EXTRA_CFLAGS += -DCONFIG_CONCURRENT_MODE
 EXTRA_CFLAGS += -DRTW_P2P_GROUP_INTERFACE=1
 EXTRA_CFLAGS += -Wno-error=date-time
+EXTRA_CFLAGS += -DCONFIG_RTW_CFGVENDOR_RSSIMONITOR
+EXTRA_CFLAGS += -DCONFIG_RTW_CFGVENDOR_LLSTATS
+EXTRA_CFLAGS += -DCONFIG_RTW_IOCTL_SET_COUNTRY
+EXTRA_CFLAGS += -DCONFIG_RTW_CFGVENDOR_CQM_THRESHOLD_EVT_LOW
 MODULE_NAME = rtl8822ce
 endif
 
 ifeq ($(CONFIG_RTW_MBO), y)
-EXTRA_CFLAGS += -DCONFIG_RTW_MBO -DCONFIG_RTW_80211K -DCONFIG_RTW_WNM -DCONFIG_RTW_BTM_ROAM
+# CONFIG_RTW_MBO has a compiler error comparing a pointer to a zero character constant.
+# Easy to fix, but leaving disabled for now.
+#EXTRA_CFLAGS += -DCONFIG_RTW_MBO
+EXTRA_CFLAGS += -DCONFIG_RTW_WNM -DCONFIG_RTW_BTM_ROAM
 EXTRA_CFLAGS += -DCONFIG_RTW_80211R
 endif
 
diff --git a/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/ioctl_cfg80211.c b/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/ioctl_cfg80211.c
index 7b1df7ba4bdc..629edfa4d8c8 100644
--- a/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/ioctl_cfg80211.c
+++ b/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/ioctl_cfg80211.c
@@ -3546,6 +3546,21 @@ static void cfg80211_rtw_abort_scan(struct wiphy *wiphy,
 }
 #endif
 
+static int cfg80211_rtw_set_cqm_rssi_config(struct wiphy *wiphy,
+                                            struct net_device *dev,
+	                               	    s32 rssi_thold,
+				            u32 rssi_hyst)
+{
+	_adapter *padapter = GET_PRIMARY_ADAPTER(wiphy_to_adapter(wiphy));
+        struct rtw_wdev_priv *pwdev_priv = adapter_wdev_data(padapter);
+
+	pwdev_priv->rssi_monitor_max = 0;
+	pwdev_priv->rssi_monitor_min = rssi_thold;
+        pwdev_priv->rssi_monitor_enable = 1;
+        RTW_INFO("%s, rssi_thold=%d, rssi_hyst=%d\n", __func__, rssi_thold, rssi_hyst);
+        return 0;
+}
+
 static int cfg80211_rtw_set_wiphy_params(struct wiphy *wiphy, u32 changed)
 {
 #if 0
@@ -10546,6 +10561,9 @@ static struct cfg80211_ops rtw_cfg80211_ops = {
     || defined(CONFIG_KERNEL_PATCH_EXTERNAL_AUTH)
 	.external_auth = cfg80211_rtw_external_auth,
 #endif
+#ifdef CONFIG_RTW_CFGVENDOR_RSSIMONITOR
+        .set_cqm_rssi_config = cfg80211_rtw_set_cqm_rssi_config,
+#endif
 };
 
 struct wiphy *rtw_wiphy_alloc(_adapter *padapter, struct device *dev)
diff --git a/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/rtw_cfgvendor.c b/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/rtw_cfgvendor.c
index 6daa9e2d6dd1..47cbace53772 100644
--- a/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/rtw_cfgvendor.c
+++ b/nvidia/drivers/net/wireless/realtek/rtl8822ce/os_dep/linux/rtw_cfgvendor.c
@@ -36,6 +36,7 @@
 */
 
 #include <net/rtnetlink.h>
+#include "rtw_cfgvendor.h"
 
 #ifndef MIN
 #define MIN(x,y) (((x) < (y)) ? (x) : (y))
@@ -1351,11 +1352,43 @@ void rtw_cfgvendor_rssi_monitor_evt(_adapter *padapter) {
         if (pwdev_priv->rssi_monitor_enable == 0 || check_fwstate(pmlmepriv, WIFI_ASOC_STATE) != _TRUE)
                 return;
 
-        if (rssi < pwdev_priv->rssi_monitor_max || rssi > pwdev_priv->rssi_monitor_min)
+	#ifdef CONFIG_RTW_CFGVENDOR_CQM_THRESHOLD_EVT_LOW
+        /* Updated this function to return NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW, which is the
+           type of event expected by wpa_supplicant when the rssi value drops below threshold.
+           This type of event triggers a scan, and is generally followed by a roam to an AP
+           with stronger signal. */
+        if (rssi < pwdev_priv->rssi_monitor_max && rssi > pwdev_priv->rssi_monitor_min)
                 return;
 
 	kflags = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;
 
+	cfg80211_cqm_rssi_notify(wdev->netdev, NL80211_CQM_RSSI_THRESHOLD_EVENT_LOW, kflags);
+
+	/* After a cqm rssi threshold event, disable event triggering to:
+	     1. prevent constant event generation.
+	     2. allow the wpa_supplicant to drive this process based on its bgscan interval settings. */
+	pwdev_priv->rssi_monitor_enable = 0;
+ 
+	return;
+	
+        #else
+	/* The original code calls rtw_cfg80211_vendor_event_alloc() to allocate an skb to
+           send a "vendor event" to user space.  The third value passed to
+           rtw_cfg80211_vendor_event_alloc() should be "event_idx: index of the vendor event
+           in the wiphy's vendor_events", but rather than passing the index of the vendor event
+           in the vendor_events array, the code incorrectly passes the enum value 13 of the
+           GOOGLE_RSSI_MONITOR_EVENT vendor event.  This value is larger than the size of the
+           vendor_events array and results in a return value of NULL rather than the address of
+           an allocated skb buffer.  Since the skb is not allocated,  no vendor event is actually
+           reported.  Modifying this code to send the proper index of the vendor_event does not
+           improve things, since this vendor defined event type is not handled by wpa_supplicant
+           anyway. */ 
+
+        if (rssi < pwdev_priv->rssi_monitor_max || rssi > pwdev_priv->rssi_monitor_min)
+               return;
+
+	kflags = in_atomic() ? GFP_ATOMIC : GFP_KERNEL;
+
 	/* Alloc the SKB for vendor_event */
 	skb = rtw_cfg80211_vendor_event_alloc(wiphy, wdev, tot_len, GOOGLE_RSSI_MONITOR_EVENT, kflags);
 	if (!skb) {
@@ -1373,6 +1406,8 @@ void rtw_cfgvendor_rssi_monitor_evt(_adapter *padapter) {
 	rtw_cfg80211_vendor_event(skb, kflags);
 exit:
 	return;
+
+        #endif /* original code */
 }
 #endif /* CONFIG_RTW_CFGVENDOR_RSSIMONITR */
 
-- 
2.17.1

